name: Manual workflow
on:
  push:
    branches:
    - main
  workflow_dispatch:

jobs:
  oc-command-tasks:
    runs-on: ubuntu-20.04
    environment: test
    env:
      OPENSHIFT_SERVER: https://api.cluster-4fab.4fab.example.opentlc.com:6443
      OPENSHIFT_NAMESPACE: testproject
    steps:
    - name: Check environment
      run: |
        whoami
        pwd
        ls -al
        which oc
        oc version
        env | sort
    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV
    - name: Log in to OpenShift
      run: |
        oc login \
          --token "${{ secrets.OPENSHIFT_TOKEN }}" \
          --insecure-skip-tls-verify \
          ${{ env.OPENSHIFT_SERVER }}
    - name: Create Project if not exists
      run: |
        if ! oc project ${{ env.OPENSHIFT_NAMESPACE }} ; then
          oc new-project ${{ env.OPENSHIFT_NAMESPACE }}
        fi
    - name: Create ImageStream if not exists
      run: |
        if ! oc get is jboss-eap73-openjdk11-openshift ; then
          oc replace --force -f \
            https://raw.githubusercontent.com/jboss-container-images/jboss-eap-7-openshift-image/7.3.x/templates/eap73-openjdk11-image-stream.json
        fi
    - name: Create Template if not exists
      run: |
        if ! oc get template eap73-openjdk11-basic-s2i ; then
          oc replace --force -f \
            https://raw.githubusercontent.com/jboss-container-images/jboss-eap-7-openshift-image/7.3.x/templates/eap73-openjdk11-basic-s2i.json
        fi
    - name: Create BuildConfig and others if not exists
      run: |
        if ! oc get bc ${{ env.APP_NAME }} ; then
          oc new-app \
            --name=${{ env.APP_NAME }} \
            -p APPLICATION_NAME=${{ env.APP_NAME }} \
            -p IMAGE_STREAM_NAMESPACE=$(oc project -q) \
            --template=eap73-openjdk11-basic-s2i \
            -p SOURCE_REPOSITORY_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git \
            -p SOURCE_REPOSITORY_REF=main \
            -p CONTEXT_DIR="" \
            -p MEMORY_LIMIT=512Mi \
            -e ENABLE_ACCESS_LOG=true \
            -e DISABLE_EMBEDDED_JMS_BROKER=true
          # Allow long startup time for EAP.
          oc set probe dc ${{ env.APP_NAME }} --startup --open-tcp=8080 --initial-delay-seconds=30 --failure-threshold=27
          # Manually starts the runtime image build.
          oc set triggers bc ${{ env.APP_NAME }} --from-image=${{ env.APP_NAME }}-build-artifacts:latest --remove
          # Cancel the first build because new-app command can't wait it.
          oc cancel-build ${{ env.APP_NAME }}-build-artifacts-1
        fi
    - name: Start S2I Maven build
      run: |
        oc start-build ${{ env.APP_NAME }}-build-artifacts --follow --wait
    - name: Start runtime image build
      run: |
        oc start-build ${{ env.APP_NAME }} --follow --wait
    - name: Show all resoureces
      run: |
        oc get all
    - name: Show the route URL
      run: |
        echo "https://$( oc get route ${{ env.APP_NAME }} -o jsonpath='{.spec.host}' )/"
